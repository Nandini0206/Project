/* You have used padding a lot throughout your code but keep in kind where it might be better to use margin instead */
/* This explains some cases for using either: https://medium.com/frontendshortcut/margin-vs-padding-c1fc8ea8bfaf */

body {
  text-align: center;
  /* I think this was added because the second navbar class (which has been changed to navbar-nav)
    was adding extra space. It is no longer needed. */
  /* padding-top: 70px; */
  font-family: 'Raleway', sans-serif;
  background-color: #F4C9D3;
}

.jumbotron {
  background-image: url('https://images.unsplash.com/photo-1520052205864-92d242b3a76b?ixlib=rb-0.3.5&ixid=eyJhcHBfaWQiOjEyMDd9&s=f440be669cb7081adb95b8c0fdff951f&w=1000&q=80');
  background-size: cover;
  background-attachment: fixed;
}

nav ul {
  overflow: hidden;
  text-align: center;
  padding: 0;
  margin: 0;
  -webkit-transition: max-height 0.4s;
  -ms-transition: max-height 0.4s;
  -moz-transition: max-height 0.4s;
  -o-transition: max-height 0.4s;
  transition: max-height 0.4s;
}

nav ul li {
  display: inline-block;
  padding: 20px 30px 0px 30px;
}

/*
  If you've not seen padding or margin with only two values this basically means top/bottom and left/right
  So,
    padding: 0 20%; is the same as:
    padding: 0 20% 0 20%;

*/
.social-buttons {
  align-content: center;
  /*
    Pixels are finite values, whereas percentages are relative values.
    This means that 280px is always the same size in all cases, whereas a % will be calculated from the parent element
    By using % it says when the screen is narrower then take up less space.
   */
  /*padding: 100px 280px 0px 280px;*/
  padding: 0 20%;

  /*
    This is another option. It says that we only ever want the buttons to spread across 60% of the width of the screen
    Again, using % means it reacts to the size of the screen.
    "margin: 0 auto" is a common trick for centering blocks horizontally. It says, automatically calculate the margin
    on the left and right sides, which browsers end up centring.
  */
  /*width: 60%;*/
  /*margin: 0 auto;*/

  /* You could also experiment with min-width and max-width properties to tweak the design too */
}

.subscribe {
  align-items: center;
  padding-top: 25px;
}

.btn:hover {
  background-color: #9C68A1;
}

.button {
  padding: 0px 10px 0px 10px;
}

header {
  padding: 140px 0px 60px 0px;
}

/* Is this needed? */
h1 {
  font-size: 100%;
}

h2 {
  font-weight: bold;
  font-size: large;
}

h3 {
  font-weight: bold;
  font-size: large;
}

#Title {
  padding: 0px 0px 100px 0px;
}

.button-row {
  display: flex;
}

.button-column {
  flex: 33.33%;
  padding: 5px;
}

ul {
  list-style-type: none;
  padding-right: 30px;
  align-items: center;
}

.section {
  /* Be wary of adding lots of padding to the top of sections because responsiveness normally means that things will
     stack on top of each-other/go vertical, so top/bottom paddings and margin will look big on a mobile screen*/
  /* Also, this could just be padding-top: 80px; */
  padding: 80px 0px 0px 0px;
}

ol {
  align-items: center;
  list-style-position: inside;
  padding-right: 30px;
}

/* As vertical space is so much more important on mobile screens be wary of adding all this vertical margin (50px)
   Maybe add a media query for smaller screens to render less margin */
/* You might also want to think of renaming this, really it is a list item, not a list */
.list {
  margin: 50px 0;
  font-size: large;
  padding-top: 15px;
}

.wrapper {
  display: grid;
  grid-template-columns: 50% 50%;
  grid-gap: 20px;
}

.contain {
  position: relative;
}

.image {
  display: block;
  width: 100%;
  height: 100%;
  padding-top: 40px;
}

.overlay {
  position: absolute;
  bottom: 0;
  background: rgb(0, 0, 0);
  background: rgba(0, 0, 0, 0.5);
  color: #f1f1f1;
  width: 100%;
  transition: .5s ease;
  opacity: 0;
  color: white;
  font-size: 15px;
  padding: 20px;
  text-align: center;
}

.container:hover .overlay {
  opacity: 1;
}

a {
  color: black;
}

a:hover {
  color: #C3649C;
}

.trends {
  padding-bottom: 40px;
}

.navbar-nav {
  /* prevent the navbar from aligning on the left */
  float: none;
}

.handle {
  width: 100%;
  background: #F8F8F8;
  /* Do you want this to be aligned in the left or center? */
  text-align: center;
  box-sizing: border-box;
  padding: 15px 10px;
  cursor: pointer;
  color: black;
  display: none;
}
@media screen and (max-width: 580px){
  nav ul {
    max-height: 0;
  }
  .showing {
    max-height: 20em;
  }
  nav ul li {
    box-sizing: border-box;
    width: 100%;
    padding: 15px;
  }
  .handle {
    display: block;
  }
  /*
  .list {
    margin: 10px 0;
  }
  */
}
